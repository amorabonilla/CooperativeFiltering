library(CooperativeFiltering)
library(CooperativeFiltering)
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_celebA.R')
devtools::load_all()
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_celebA.R')
debugSource('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/R/NextMinGen.R')
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/R/random_experiment_dataset.R')
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_celebA.R')
M
class(M)
colSums(M)==1
dim(M)
library(CooperativeFiltering)
library(CooperativeFiltering)
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_celebA.R')
devtools::load_all()
devtools::load_all()
library(CooperativeFiltering)
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_celebA.R')
library(CooperativeFiltering)
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/R/NextMinGen.R')
library(CooperativeFiltering)
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_celebA.R')
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/R/NextMinGen.R')
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_celebA.R')
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_celebA.R')
IS
class(IS)
LHS_matrix
M
class(M)
dim(M)
colSums(M)
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_players.R')
FC <- read.csv("./datasets/pesPlayers2016ModificadoFINAL.csv")
nombrefilas <-  FC$X
rownames(FC) <- as.vector(FC$X)
FC$X <- NULL
filas <- rownames(FC)
FC1 <-as.data.frame(sapply(FC, function(x) as.logical(x)))
my_support <- 0.001
rule_param = list(
supp = my_support,
conf = 1,
maxlen = 15
)
dt_experiment_sizes <- data.frame(execution=c(),
experiment=c(),
iteration=c(),
sigma=c(),
#closure=c(),
attributes=c(),
objects=c(),
closure=c())
num_execution <- 1
num_experiment <- 1
verbose <- TRUE
# n number of users
n_users=2
num_scales <- 4
number_executions_of_the_experiment <- 10
Rules <- apriori(FC1,parameter = rule_param)
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_players.R')
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_players.R')
dt_experiment_sizes$execution <- NULL
dt_experiment_sizes
dt_experiment_sizes
library(CooperativeFiltering)
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_players.R')
dt_experiment_sizes$execution <- NULL
dt_experiment_sizes
library(CooperativeFiltering)
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_players.R')
dt_experiment_sizes$execution <- NULL
dt_experiment_sizes
library(CooperativeFiltering)
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_players.R')
dt_experiment_sizes$execution <- NULL
dt_experiment_sizes
my_support <- 0.1
rule_param = list(
supp = my_support,
conf = 1,
maxlen = 15
)
Rules <- apriori(FC1,parameter = rule_param)
my_support <- 0.1
rule_param = list(
supp = my_support,
conf = 1,
maxlen = 15
)
my_support <- 0.1
rule_param = list(
supp = my_support,
conf = 1,
maxlen = 15
)
Rules <- apriori(FC1,parameter = rule_param)
library(devtools)
devtools::load_all()
library(knitr)
library(arules)
library(fcaR)
library(Matrix)
library(tidyverse)
library(pmml)
library(sets)
library(magrittr)
# library("stringr")
# library(data.table)
# library(readxl)
# #library(readr)
library(foreach)
library(doParallel)
library(doSNOW)
FC <- read.csv("/Volumes/GoogleDrive/Mi\ unidad/CooperativeFiltering/datasets/sytora-master/data/all-files-for-ml/all_pivoted.csv")
colnames(FC)
filas <- rownames(FC)
FC1 <-as.data.frame(sapply(FC, function(x) as.logical(x)))
my_support <- 0.1
rule_param = list(
supp = my_support,
conf = 1,
maxlen = 15
)
Rules <- apriori(FC1,parameter = rule_param)
my_support <- 0.01
rule_param = list(
supp = my_support,
conf = 1,
maxlen = 15
)
Rules <- apriori(FC1,parameter = rule_param)
my_support <- 0.005
rule_param = list(
supp = my_support,
conf = 1,
maxlen = 15
)
Rules <- apriori(FC1,parameter = rule_param)
Rules1 <- Rules[!is.redundant(Rules)]
Rules1
my_support <- 0.01
rule_param = list(
supp = my_support,
conf = 1,
maxlen = 15
)
Rules <- apriori(FC1,parameter = rule_param)
my_support <- 0.008
rule_param = list(
supp = my_support,
conf = 1,
maxlen = 15
)
Rules <- apriori(FC1,parameter = rule_param)
my_support <- 0.009
rule_param = list(
supp = my_support,
conf = 1,
maxlen = 15
)
Rules <- apriori(FC1,parameter = rule_param)
my_support <- 0.006
rule_param = list(
supp = my_support,
conf = 1,
maxlen = 15
)
Rules <- apriori(FC1,parameter = rule_param)
name_file_rules <- "reglas_disease.xml"
Rules1 <- Rules[!is.redundant(Rules)]
Rules1
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_disease.R')
my_support <- 0.01
rule_param = list(
supp = my_support,
conf = 1,
maxlen = 15
)
Rules <- apriori(FC1,parameter = rule_param)
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_disease.R')
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_disease.R')
FC1
View(FC1)
FC <- read.csv("/Volumes/GoogleDrive/Mi\ unidad/CooperativeFiltering/datasets/sytora-master/data/all-files-for-ml/all_pivoted.csv")
View(FC)
rownames(FC) <- FC$Disease
rownames(FC) <- FC$Disease
FC$Disease <- NULL
FC1 <-as.data.frame(sapply(FC, function(x) as.logical(x)))
View(FC1)
filas
FC <- read.csv("/Volumes/GoogleDrive/Mi\ unidad/CooperativeFiltering/datasets/sytora-master/data/all-files-for-ml/all_pivoted.csv")
colnames(FC)
colnames(FC)
rownames(FC) <- FC$Disease
filas <- rownames(FC)
filas
#View(head(FC1))
rownames(FC1) <- filas
my_support <- 0.01
rule_param = list(
supp = my_support,
conf = 1,
maxlen = 15
)
Rules <- apriori(FC1,parameter = rule_param)
source('/Volumes/GoogleDrive/Mi unidad/CooperativeFiltering/Ejemplos-pruebas/SLrecomender_disease.R')
